# FEEL FREE TO CHANGE THE CODE. 
# This is just a dull example

#Simple methods that the byzantine node calls to decide what to vote.


#Compute byzantine votes for round 1, by trying to create
#a split decision.
#input: 
#	number of loyal nodes,
#	number of total nodes,
#	Decision on a tie: True or False 
#output:
#	A list with votes to send to the loyal nodes
#	in the form [True,False,True,.....]
def compute_byzantine_vote_round1(no_loyal,on_tie):

  result_vote = []
  for i in range(0,no_loyal):
    if i%2==0:
      result_vote.append(not on_tie)
    else:
      result_vote.append(on_tie)
  return result_vote

#Compute byzantine votes for round 2, trying to swing the decision
#on different directions for different nodes.
#input: 
#	number of loyal nodes,
#	number of total nodes,
#	Decision on a tie: True or False
#output:
#	A list where every element is a the vector that the 
#	byzantine node will send to every one of the loyal ones
#	in the form [[True,...],[False,...],...]
def compute_byzantine_vote_round2(no_loyal,no_total,on_tie):
  
  result_vectors=[]
  for i in range(0,no_loyal):
    if i%2==0:
      result_vectors.append([on_tie]*no_total)
    else:
      result_vectors.append([not on_tie]*no_total)
  return result_vectors



# ------------------------------------------------------------------------------   
# Start listening and handle incoming connections in board() function
# ------------------------------------------------------------------------------   
def start_board():
  ip = mycontext['ip']
  port = mycontext['port']
  print "Listening on IP " + str(ip) +" port " + str(port)
  try: 
    listencommhandle = waitforconn(ip, port, board_connection_handler)
  except Exception, e:
    print "Exception in start_board: %s, %s\n" %(type(e), e)
    raise
    #pass

# ------------------------------------------------------------------------------    
# Called when an incoming message is received. 
# --> Important starting point
# ------------------------------------------------------------------------------    
def board_connection_handler(ip, port, sockobj, thiscommhandle, listencommhandle):
  try:
    msgheader = sockobj.recv(1024) # Receive message
    if not msgheader.startswith('GET'):
      print '****Request:\n%s' % msgheader
    # React depending on message type: HTTP GET or POST, or some other type of communication.
    if msgheader.startswith( 'GET' ):
      if msgheader.startswith("GET /vote/result"):
        get_vote_result(msgheader, sockobj, thiscommhandle)
      else: 
        get_board_handler(msgheader, sockobj, thiscommhandle)

    elif msgheader.startswith('POST /vote/attack'):
      mycontext['vote_vector'][mycontext['identifier']] = str(True) 
      send_to_vessels(True,3,1)
      if len(mycontext['vote_vector']) == len(mycontext['vessels'])+1:
        mycontext['vote_vector_vector'][mycontext['identifier']] = mycontext['vote_vector']
        send_to_vessels(mycontext['vote_vector'],3,2)
      res=make_http_response(200,'OK','')
      sockobj.send(res)
      stopcomm(thiscommhandle)

    elif msgheader.startswith('POST /vote/retreat'):
      mycontext['vote_vector'][mycontext['identifier']] = str(False)
      send_to_vessels(False,3,1)
      if len(mycontext['vote_vector']) == len(mycontext['vessels'])+1:
        mycontext['vote_vector_vector'][mycontext['identifier']] = mycontext['vote_vector']
        send_to_vessels(mycontext['vote_vector'],3,2)
      res=make_http_response(200,'OK','')
      sockobj.send(res)
      stopcomm(thiscommhandle)

    elif msgheader.startswith('POST /neighbour/vote1'):
      query = extract_http_request_contents(msgheader)
      parameters = extract_parameters_from_query(query)
      recvote = parameters['vote']
      nodeid = parameters['id']
      mycontext['vote_vector'][nodeid] = recvote
      #print len(mycontext['vote_vector'])
      if len(mycontext['vote_vector']) == len(mycontext['vessels'])+1:
        mycontext['vote_vector_vector'][mycontext['identifier']] = mycontext['vote_vector']
        send_to_vessels(mycontext['vote_vector'],3,2) 
      print str(mycontext['vote_vector'])

    elif msgheader.startswith('POST /neighbour/vote2'):
      print "----------inside vote2-----------"
      query = extract_http_request_contents(msgheader)
      #print len(mycontext['vote_vector_vector'])
      parameters = extract_parameters_from_query(query)
      #format string to hash 
      #print parameters['vote']
      #print format_to_dict(parameters['vote'])
      if mycontext['isbyzantine']:
        byz_vector_votes = compute_byzantine_vote_round2(4,len(mycontext['vessels'])+1,True)
        #print byz_vector_votes
        for i in range(len(mycontext['vessels'])):
          send_to_vessel(format_vector_to_dict(byz_vector_votes[i]), 3, 2, mycontext['vessels'][i])
        mycontext['vote_result'] = "<pre>byzantine</pre>"
        mycontext['isbyzantine'] = False
        vote_vector = {}
        mycontext['vote_vector'] = vote_vector
        vote_vector_vector = {}
        mycontext['vote_vector_vector'] = vote_vector_vector
        result_vector = {}
        mycontext['result_vector'] = result_vector
        for vesselid in mycontext['vessels']:
          if mycontext['global']:
            mycontext['result_vector'][str(vesselid[0])] = 0
          else: 
            mycontext['result_vector'][str(vesselid[1])] = 0
        mycontext['result_vector'][mycontext['identifier']] = 0
        
      else: 
        mycontext['vote_vector_vector'][parameters['id']] = format_to_dict(parameters['vote'])
        if len(mycontext['vote_vector_vector']) == len(mycontext['vessels'])+1:
          majoritycolumn = majority_column_vote(mycontext['vote_vector_vector'])
          finalresult = majority_vector(majoritycolumn)
          mycontext['vote_result'] = "<pre>"+str(finalresult)+"</pre>" + "<br><pre>"+ str(majoritycolumn)+"</pre>"
          vote_vector = {}
          mycontext['vote_vector'] = vote_vector
          vote_vector_vector = {}
          mycontext['vote_vector_vector'] = vote_vector_vector
          result_vector = {}
          mycontext['result_vector'] = result_vector
          for vesselid in mycontext['vessels']:
            if mycontext['global']:
              mycontext['result_vector'][str(vesselid[0])] = 0
            else: 
              mycontext['result_vector'][str(vesselid[1])] = 0
          mycontext['result_vector'][mycontext['identifier']] = 0

    elif msgheader.startswith('POST /vote/byzantine'):
      mycontext['isbyzantine'] = True
      byz_vote_list = compute_byzantine_vote_round1(len(mycontext['vessels']), True)
      for i in range(len(mycontext['vessels'])):
        send_to_vessel(str(byz_vote_list[i]), 3, 1, mycontext['vessels'][i])
      res=make_http_response(200,'OK','')
      sockobj.send(res)
      stopcomm(thiscommhandle)
        
      
    else:
      other_requests_handler(msgheader, sockobj, thiscommhandle)

  except Exception, e:
    print "Exception in board: %s, %s\n" %(type(e), e)
    #raise

# ----------------------------------------------------------------------------
# Format string to dict 
# ---------------------------------------------------------------------------- 
def format_to_dict(string):
  vectordict = {}
  formatstring = (" " + string[1:-1]).split(',')
  for pair in formatstring:
     key = pair.split(':')[0][2:-1]
     value = pair.split(':')[1][2:-1]
     vectordict[key] = value
  return vectordict

# ----------------------------------------------------------------------------
# Format vector to dict 
# ---------------------------------------------------------------------------- 
def format_vector_to_dict(vector):
  vectordict = {}
  vectordict[mycontext['identifier']]= str(vector[len(mycontext['vessels'])])
  for i in range(0,len(mycontext['vessels'])):
    if mycontext['global']:
      vectordict[mycontext['vessels'][i][0]] = str(vector[i])
    else: 
      vectordict[mycontext['vessels'][i][1]] = str(vector[i])
  return vectordict

# ------------------------------------------------------------------------------
# Majority column vote 
# vote dict = vote vector vector 
# ------------------------------------------------------------------------------
def majority_column_vote(votedict):
  result_vector = {}
  print votedict 
  for key0 in votedict:
    for key1 in votedict[key0]:
      if votedict[key0][key1] == 'True':
        mycontext['result_vector'][key1] += 1 
      else: 
        mycontext['result_vector'][key1] -= 1 
  for key in mycontext['result_vector']:
    if mycontext['result_vector'][key] < 0:
      result_vector[key] = 'False'
    elif mycontext['result_vector'][key] > 0:
      result_vector[key] = 'True'
    else: 
     result_vector[key] = 'UNKNOWN'
  return result_vector 

# ------------------------------------------------------------------------------
# Majority vector vote 
# ------------------------------------------------------------------------------
def majority_vector(votevector):
  finalres = 0
  for vote in votevector:
    print vote
    if votevector[vote] == 'True':
      finalres += 1
    elif votevector[vote] == 'False': 
      finalres -= 1
  if finalres < 0:
    return False
  else:
    return True


# ------------------------------------------------------------------------------
# Send to vessels 
# ------------------------------------------------------------------------------
def send_to_vessels(vote,testnmbr,round):
  for sock in mycontext['vessels']:
    send_to_vessel(vote,testnmbr,round,sock)

def send_to_vessel(vote,testnmbr,round,sock):
  try:
    msg = ("id=" + mycontext['identifier'] + "&vote=" + str(vote))
    socketobject = openconn(sock[0],int(sock[1]))
    http_res = make_http_response(200,'OK',msg)
    if round == 1:
      send_object = 'POST /neighbour/vote1 ' + http_res
    elif round == 2:    
      send_object = 'POST /neighbour/vote2 ' + http_res
    socketobject.send(send_object)
    socketobject.close()
  except:  
    if(testnmbr != 0):
      send_to_vessel(vote,testnmbr-1,round,sock)
    else:
      if mycontext['global']:
        print "error in connection to vessel: " + sock[0]
      else:
        print "error in connection to vessel: " + sock[1]



# ------------------------------------------------------------------------------
# Get vote result
# ------------------------------------------------------------------------------

def get_vote_result(msgheader, sockobj, thiscommhandle):
  htmlresponse = mycontext['vote_result']
  res=make_http_response(200, 'OK', htmlresponse)
  sockobj.send(res)
  stopcomm(thiscommhandle)

# ------------------------------------------------------------------------------
# Handles initial GET request from browser, outputs HTML string and closes socket.
# ------------------------------------------------------------------------------
def get_board_handler(msgheader, sockobj, thiscommhandle):
  htmlresponse = generate_html_page()
  res=make_http_response(200, 'OK', htmlresponse)
  sockobj.send(res)
  stopcomm(thiscommhandle) 

# ------------------------------------------------------------------------------
# Handles initial GET request from browser, outputs HTML string and closes socket.
# ------------------------------------------------------------------------------
def other_requests_handler(msgheader, sockobj, thiscommhandle):
  # extract the query from the HTTP request  
  query = extract_http_request_contents(msgheader)
  print query
  # extract the query parameters
  parameters = extract_parameters_from_query(query)
  print parameters
  print parameters['entry']
  
  # Do not mix HTML code with the server code as done here. This is a bad practice
  template='<html><head><style>.status {color: red;font-size: 75%%;}</style></head><body><pre><samp class="status">%s</samp></pre></body><html>'
  htmlresponse = template % ("404 Not Found\n" + msgheader)
  res=make_http_response(404, 'Not Found', htmlresponse)
  sockobj.send(res)
  stopcomm(thiscommhandle) 

# ------------------------------------------------------------------------------
# Wrap into HTTP headers
# ------------------------------------------------------------------------------
def make_http_response(status, status_text, htmlresponse):
    response_template = "HTTP/1.1 %d %s\r\nContent-type: text/html\r\nContent-Length: %i\r\n\r\n%s"
    return response_template % (status, status_text, len(htmlresponse), htmlresponse)

# ------------------------------------------------------------------------------
# Utility function to extract the contents (payload) from HTTP request
# ------------------------------------------------------------------------------
def extract_http_request_contents(header):
  # find content length
  conent_length = header.split('Content-Length: ')[1]
  conent_length = int(conent_length.split('\r\n')[0])
  
  # extract the http response body and discard the header
  contetns = header[-conent_length:]
  return contetns

# ------------------------------------------------------------------------------
# Utility function to extract query parameter from HTML query
# ------------------------------------------------------------------------------
def extract_parameters_from_query(msg):
  # extract the query parameters as a dictionary: {name:value}
  # example input format: comment=aa&ip=127.0.0.1&port=63101&action=Delete
  parameters={}
  arr = msg.split('&')
  for a in arr:
    pp = a.split('=')
    if len(pp)>1:
      parameters[pp[0]] = pp[1]
  return parameters

# ------------------------------------------------------------------------------
# Outputs the blackboard html 
# ------------------------------------------------------------------------------   
def generate_html_page():
  #Initialize blackboard content
  
  # one sample entry
  #msg='sample msg'
  #msgid=1
  #entry1 = mycontext['entry_template'] %('entries/%d' % (msgid), msgid, msg)
  #entry2 = mycontext['entry_template'] %('entries/%d' % (msgid+1), msgid+1, msg)

  #entries = "".join([entry1, entry2])
  # dynamic title showing Ip address, port and up time. 
  #title='Sample board @ %s:%d. Up time: %d' %( str(mycontext['ip']), mycontext['port'], int(getruntime()) )
  #content = mycontext['boardcontents_template'] %( title, entries )
  #fullpage_h = mycontext['frontpage_header_template'] + content
  #fullpage = fullpage_h + mycontext['frontpage_footer_template'] % mycontext['authors']
  #print entries, content, fullpage
  return mycontext['vote_frontpage']
  
# ------------------------------------------------------------------------------    
# Main entry point of the program. Initalizes global variables in mycontext
# and calls start_board() which opens a socket for incoming connections.
# ------------------------------------------------------------------------------
if callfunc == 'initialize':
  # whenever this vessel gets a connection on its IP:port it'll call function board_connection_handler
  if len(callargs) == 1 or len(callargs) == 2:
    port = int(callargs[0])
    if len(callargs) == 2:
      ip=str(callargs[1])
    else:
      try:
        ip = getmyip()
      except Exception, e:
        print "Could not get an IP\n"
        print (type(e), e)
        raise
  
  # Fail if we don't have 1 or 2 arguments  
  else:
    raise Exception("Usage: python <path to repy.py> <path to restrictions.default> skeleton2016.repy <port> [ip (optional)]")


  mycontext['vessels']=[]
  mycontext['global'] = True
  vote_vector = {}
  mycontext['vote_vector'] = vote_vector
  vote_vector_vector = {}
  mycontext['vote_vector_vector'] = vote_vector_vector
  result_vector = {}
  mycontext['result_vector'] = result_vector
  mycontext['isbyzantine'] = False
  mycontext['task'] = 'A'


  #Initialize Port and IP
  mycontext['port'] = port
  mycontext['ip'] = ip
  mycontext['myvote'] = False 
  mycontext['identifier']=''
  
  #read html template files
  
  #mycontext['vote_result'] = file("vote_result_template.html").read() 
  
  #mycontext['entry_template'] = file("entry_template.html").read()
  #mycontext['boardcontents_template'] = file("boardcontents_template.html").read()
  #mycontext['frontpage_header_template'] = file("board_frontpage_header_template.html").read()
  #mycontext['frontpage_footer_template'] = file("board_frontpage_footer_template.html").read()
  
  if mycontext['global']:
    if mycontext['task']=='A':
      vessels = file("neighborlist1A.txt").read().split()
    else:
      vessels = file("neighborlist1B.txt").read().split()
    mycontext['identifier'] = str(ip)
    for line in vessels:
      mycontext['result_vector'][line] = 0
      if(ip != line):
        mycontext['vessels'].append((line,mycontext['port']))
  else:
    if mycontext['task']=='A':
      vessels = file("localports1A.txt").read().split()
    else:
      vessels = file("localports1B.txt").read().split()
    mycontext['identifier'] = str(port)
    for line in vessels:
      mycontext['result_vector'][line] = 0
      if(str(port) != line):
        mycontext['vessels'].append((mycontext['ip'],line))  

  mycontext['vote_result'] = "<pre>" +  str(mycontext['identifier']) + "</pre></br>" 
  mycontext['vote_frontpage'] = file("vote_frontpage_template.html").read() 

  #mycontext['authors'] = "sample author"

  # e = Exception("ex");
  # try:
  #   print "%s, %s\n" %(type(e), e)
  # except Exception, ee:
  #   print ee

  start_board()
